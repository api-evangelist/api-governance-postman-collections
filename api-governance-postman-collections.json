
{"id":"9c16e96a-722d-4e58-a5f3-011badc69580","name":"API Governance","description":"This is a collection of requests that can be used to evaluate a Postman API for specific rules and guidelines established as part of the governance of APIs being deployed across an organization. Applying tests to not the request or response of an API, but actually applying it to the details of the APIs design.\n\nThis collection is an evolving set of API governance requests and is meant to demonstrate how Postman testing can be used for API design governance, allowing anyone to fork and begin evolving to meet their own needs when it comes to governance. This collection is being evolved and managed using GitHub, so if you have any questions or requests you can submit a GitHub issue on the repository.\n\n**GitHub URL**: [https:\/\/github.com\/api-evangelist\/api-governance-postman-collections](https:\/\/github.com\/api-evangelist\/api-governance-postman-collections)","auth":null,"events":[{"listen":"prerequest","script":{"id":"3370a085-233f-477a-8d51-2cd7c1d0d823","type":"text\/javascript","exec":[""]}},{"listen":"test","script":{"id":"2fa81517-d02e-4be1-8e63-210cc5d54d29","type":"text\/javascript","exec":[""]}}],"variables":[],"order":["f8cf0571-859b-4b34-ac49-21330ebfcb95"],"folders_order":["e68a6752-7bfa-4730-b764-4e2872f3fa95","4befb064-bcf8-4d18-822f-990a1cb1139e","d080b25a-5317-49ce-b081-d37808f28fd9","c0f08b0b-8a50-45d6-9f76-530335840d0b","4334d3a8-1de9-4ac9-aaea-f1c7e73493b4","759a83dd-2982-4fc8-b896-37d7496fecdc"],"protocolProfileBehavior":[],"folders":[{"id":"e68a6752-7bfa-4730-b764-4e2872f3fa95","name":"Info","description":"These API governance requests for on the name, description, and other information elements of the API, helping developers understand what is possible with an API.","auth":null,"events":[{"listen":"prerequest","script":{"id":"01df1bd6-6ebe-48f6-b23e-5231f59b8e15","type":"text\/javascript","exec":[""]}},{"listen":"test","script":{"id":"95148186-ebdc-43a2-be10-51dd19db7125","type":"text\/javascript","exec":[""]}}],"collection":"9c16e96a-722d-4e58-a5f3-011badc69580","folder":null,"order":["0349d41c-b754-4109-9f53-3154d538848a","91104aa8-84d6-400d-ac58-1008d0750c5b"],"folders_order":[],"protocolProfileBehavior":[],"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","folderId":"e68a6752-7bfa-4730-b764-4e2872f3fa95"},{"id":"d080b25a-5317-49ce-b081-d37808f28fd9","name":"Methods","description":"These API governance requests focus on ensuring each API method has all of the required details when it comes to describing what is possible with each individual HTTP method present as part of an API.","auth":null,"events":[{"listen":"prerequest","script":{"id":"1f19add1-fa54-4967-84d5-2051e8546a6f","type":"text\/javascript","exec":[""]}},{"listen":"test","script":{"id":"4be1232c-7a95-45d6-a474-13da0c28fbfa","type":"text\/javascript","exec":[""]}}],"collection":"9c16e96a-722d-4e58-a5f3-011badc69580","folder":null,"order":["96208336-59ae-4311-be30-39613f2a5253","1c4bdaf4-d2c1-4f99-a8b2-92c8ffcdd8b2","22e24d44-2935-4bde-81ab-7d09bdb54460","ab178595-dc2b-4638-9a29-aec1e03cf851","bc0222f6-2f03-4569-8424-772749045d45"],"folders_order":[],"protocolProfileBehavior":[],"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","folderId":"d080b25a-5317-49ce-b081-d37808f28fd9"},{"id":"c0f08b0b-8a50-45d6-9f76-530335840d0b","name":"Parameters","description":"These API governance requets focus on the query parameters for each of the individual API methods present, making sure all of the required details are present.","auth":null,"events":[{"listen":"prerequest","script":{"id":"ff3ce22e-0d21-4e43-8409-de33456f2233","type":"text\/javascript","exec":[""]}},{"listen":"test","script":{"id":"c8a0cd53-3872-4ee4-9b41-623ea5709329","type":"text\/javascript","exec":[""]}}],"collection":"9c16e96a-722d-4e58-a5f3-011badc69580","folder":null,"order":["6165916a-4af3-460a-8cb5-8258eebd6b8b","138d3441-f35a-4498-8c6b-929c22476032"],"folders_order":[],"protocolProfileBehavior":[],"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","folderId":"c0f08b0b-8a50-45d6-9f76-530335840d0b"},{"id":"4befb064-bcf8-4d18-822f-990a1cb1139e","name":"Paths","description":"These API governance requests are focused on the available API paths present in an API being defined as part of this worksapce, ensuring that the design of API paths are in alignment with the overall governance strategy.","auth":null,"events":[{"listen":"prerequest","script":{"id":"62936758-376d-489b-8af7-85d8e1dc29fd","type":"text\/javascript","exec":[""]}},{"listen":"test","script":{"id":"073bf0cb-8e28-4d66-b118-93c42e1ae5ca","type":"text\/javascript","exec":[""]}}],"collection":"9c16e96a-722d-4e58-a5f3-011badc69580","folder":null,"order":["b68ce10c-b0b9-422d-8900-db9b1db4b913"],"folders_order":[],"protocolProfileBehavior":[],"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","folderId":"4befb064-bcf8-4d18-822f-990a1cb1139e"},{"id":"4334d3a8-1de9-4ac9-aaea-f1c7e73493b4","name":"Responses","description":"These API governance requests focus on evaluating the responses that are defined for each API method, making sure they have the required HTTP status code, media types, and other elements present.","auth":null,"events":[{"listen":"prerequest","script":{"id":"5d48e8bc-2c08-4ef1-872e-3aba4eb39ec9","type":"text\/javascript","exec":[""]}},{"listen":"test","script":{"id":"63daa704-367e-4faf-ab1e-a1d7b5265e8a","type":"text\/javascript","exec":[""]}}],"collection":"9c16e96a-722d-4e58-a5f3-011badc69580","folder":null,"order":["2ce1dac6-1061-44e8-8904-3046823c3c83","6421b64e-890b-4baf-abb2-63075541bcc7"],"folders_order":[],"protocolProfileBehavior":[],"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","folderId":"4334d3a8-1de9-4ac9-aaea-f1c7e73493b4"},{"id":"759a83dd-2982-4fc8-b896-37d7496fecdc","name":"Schema","description":"These API governance requests focus on evaluating the schema being defined as part of each API definition, making sure that the underlying schema for each API is well defined.","auth":null,"events":[{"listen":"prerequest","script":{"id":"c3e08309-d570-4f8a-8e58-88411d604246","type":"text\/javascript","exec":[""]}},{"listen":"test","script":{"id":"4887bff5-ea24-49d4-a66e-3e7e87d98718","type":"text\/javascript","exec":[""]}}],"collection":"9c16e96a-722d-4e58-a5f3-011badc69580","folder":null,"order":["15c3094c-b4ed-44d3-ad97-1efc69189dfd","9cfeeb5b-809f-4a3a-adcb-a3d736ccc44f"],"folders_order":[],"protocolProfileBehavior":[],"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","folderId":"759a83dd-2982-4fc8-b896-37d7496fecdc"}],"requests":[{"id":"0349d41c-b754-4109-9f53-3154d538848a","name":"Validate the Name Of The API","url":"https:\/\/postman-echo.com\/get","description":"This will vaidate that the name of the API meets all requirements.","data":null,"dataOptions":null,"dataMode":null,"headerData":[],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"test","script":{"id":"db604483-45b1-4caa-9194-4a5ba92f9ab5","exec":["var openapi_current = pm.environment.get(\"openapi_current\");","var oai = JSON.parse(openapi_current);","","var title = oai.info.title;","","console.log(openapi_current);","","\/\/ Is the title greater than five?","var greater_than_five = 0;","if(title.length > 5){","  greater_than_five = 1;  ","}","pm.test(\"Title of API is greater than 5\", function () {","    pm.expect(greater_than_five).to.eql(1);","});","","\/\/ What else can we do that is more meaningful?"],"type":"text\/javascript"}}],"folder":"e68a6752-7bfa-4730-b764-4e2872f3fa95","preRequestScript":null,"tests":"var openapi_current = pm.environment.get(\"openapi_current\");\nvar oai = JSON.parse(openapi_current);\n\nvar title = oai.info.title;\n\nconsole.log(openapi_current);\n\n\/\/ Is the title greater than five?\nvar greater_than_five = 0;\nif(title.length > 5){\n  greater_than_five = 1;  \n}\npm.test(\"Title of API is greater than 5\", function () {\n    pm.expect(greater_than_five).to.eql(1);\n});\n\n\/\/ What else can we do that is more meaningful?","currentHelper":null,"helperAttributes":null,"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","headers":"","pathVariables":[]},{"id":"138d3441-f35a-4498-8c6b-929c22476032","name":"Make Sure All Method Query Parameters Have Descriptiions","url":"https:\/\/postman-echo.com\/get","description":"Makes sure that all method query parameters have descriptions.","data":null,"dataOptions":null,"dataMode":null,"headerData":[],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"test","script":{"id":"e7929c0d-a8ec-4c58-9754-bf6e0a2ef47a","exec":["var openapi_current = pm.environment.get(\"openapi_current\");","var oai = JSON.parse(openapi_current);","","var all_parameter_descriptions_Have_paths = 1;","","if(oai.paths){","","    var paths = oai.paths;","    ","    for (const [path, methods] of Object.entries(paths)) {","       ","        console.log(path);","       ","        for (const [verb, method] of Object.entries(methods)) {","            ","            console.log(verb);","            ","            console.log(method);","            ","            if(method.parameters){","            ","                var parameters = method.parameters;","                ","                for (pIndex = 0; pIndex < parameters.length; pIndex++) {","                    ","                    name = parameters[pIndex].name;","                    ","                    if(parameters[pIndex].description){","                    ","                        description = parameters[pIndex].description;","                        ","                        \/\/ Description is greater than 100","                        var greater_than_hundred = 0;","                        if(description.length > 100){","                          greater_than_hundred = 1;  ","                        }","                        ","                        \/\/ Description is less than 1000","                        var less_than_thousand = 0;","                        if(description.length < 1000){","                          less_than_thousand = 1;  ","                        }        ","                        ","                        pm.test(path + ' - ' + verb + ' - ' + name + ' description is greater than 100', function () {","                            pm.expect(greater_than_hundred).to.eql(1);","                        });","                        ","                        pm.test(path + ' - ' + verb + ' - ' + name + ' description is less than 1000', function () {","                            pm.expect(less_than_thousand).to.eql(1);","                        });","                        ","                        ","                    ","                    }","                    else{","                        var all_parameter_descriptions_Have_paths = 0;","                    }","                }","                ","            ","            }","            ","            ","            ","        }       ","        ","    }","","} ","","pm.test(\"API has paths\", function () {","    pm.expect(has_api_paths).to.eql(1);","});"],"type":"text\/javascript"}}],"folder":"c0f08b0b-8a50-45d6-9f76-530335840d0b","preRequestScript":null,"tests":"var openapi_current = pm.environment.get(\"openapi_current\");\nvar oai = JSON.parse(openapi_current);\n\nvar all_parameter_descriptions_Have_paths = 1;\n\nif(oai.paths){\n\n    var paths = oai.paths;\n    \n    for (const [path, methods] of Object.entries(paths)) {\n       \n        console.log(path);\n       \n        for (const [verb, method] of Object.entries(methods)) {\n            \n            console.log(verb);\n            \n            console.log(method);\n            \n            if(method.parameters){\n            \n                var parameters = method.parameters;\n                \n                for (pIndex = 0; pIndex < parameters.length; pIndex++) {\n                    \n                    name = parameters[pIndex].name;\n                    \n                    if(parameters[pIndex].description){\n                    \n                        description = parameters[pIndex].description;\n                        \n                        \/\/ Description is greater than 100\n                        var greater_than_hundred = 0;\n                        if(description.length > 100){\n                          greater_than_hundred = 1;  \n                        }\n                        \n                        \/\/ Description is less than 1000\n                        var less_than_thousand = 0;\n                        if(description.length < 1000){\n                          less_than_thousand = 1;  \n                        }        \n                        \n                        pm.test(path + ' - ' + verb + ' - ' + name + ' description is greater than 100', function () {\n                            pm.expect(greater_than_hundred).to.eql(1);\n                        });\n                        \n                        pm.test(path + ' - ' + verb + ' - ' + name + ' description is less than 1000', function () {\n                            pm.expect(less_than_thousand).to.eql(1);\n                        });\n                        \n                        \n                    \n                    }\n                    else{\n                        var all_parameter_descriptions_Have_paths = 0;\n                    }\n                }\n                \n            \n            }\n            \n            \n            \n        }       \n        \n    }\n\n} \n\npm.test(\"API has paths\", function () {\n    pm.expect(has_api_paths).to.eql(1);\n});","currentHelper":null,"helperAttributes":null,"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","headers":"","pathVariables":[]},{"id":"15c3094c-b4ed-44d3-ad97-1efc69189dfd","name":"Check If Any Schema Have Properties","url":"https:\/\/postman-echo.com\/get","description":"Checks to make sure all schema have properties.","data":null,"dataOptions":null,"dataMode":null,"headerData":[],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"test","script":{"id":"4dab20d0-4d05-47d4-ba02-59547f759fed","exec":["var openapi_current = pm.environment.get(\"openapi_current\");","var oai = JSON.parse(openapi_current);","","var all_schema_have_properties = 1;","","var schemas = oai.components.schemas;","","for (const [schema_name, schema] of Object.entries(schemas)) {","   ","   console.log(schema_name); ","   ","   if(schema.properties){","       var properties = schema.properties;","       console.log(\"has properties\");","       console.log(properties);","   }","   else{","     if(schema.type){","         ","         if(schema.type== 'array'){","            console.log(\"no properties -- array\");    ","            }","        else{","            console.log(\"no properties -- \" + schema.type);    ","            all_schema_have_properties = 0;","            no_properties = 0;","            pm.test(\"All schema for this API have properties\", function () {","                pm.expect(no_properties).to.eql(1);","            });            ","            ","        }","         ","     }","   }","}","","pm.test(\"All schema for this API have properties\", function () {","    pm.expect(all_schema_have_properties).to.eql(1);","});"],"type":"text\/javascript"}}],"folder":"759a83dd-2982-4fc8-b896-37d7496fecdc","preRequestScript":null,"tests":"var openapi_current = pm.environment.get(\"openapi_current\");\nvar oai = JSON.parse(openapi_current);\n\nvar all_schema_have_properties = 1;\n\nvar schemas = oai.components.schemas;\n\nfor (const [schema_name, schema] of Object.entries(schemas)) {\n   \n   console.log(schema_name); \n   \n   if(schema.properties){\n       var properties = schema.properties;\n       console.log(\"has properties\");\n       console.log(properties);\n   }\n   else{\n     if(schema.type){\n         \n         if(schema.type== 'array'){\n            console.log(\"no properties -- array\");    \n            }\n        else{\n            console.log(\"no properties -- \" + schema.type);    \n            all_schema_have_properties = 0;\n            no_properties = 0;\n            pm.test(\"All schema for this API have properties\", function () {\n                pm.expect(no_properties).to.eql(1);\n            });            \n            \n        }\n         \n     }\n   }\n}\n\npm.test(\"All schema for this API have properties\", function () {\n    pm.expect(all_schema_have_properties).to.eql(1);\n});","currentHelper":null,"helperAttributes":null,"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","headers":"","pathVariables":[]},{"id":"1c4bdaf4-d2c1-4f99-a8b2-92c8ffcdd8b2","name":"Check All Methods Have Summaries","url":"https:\/\/postman-echo.com\/get","description":"Checks to see if all methods have summaries written for them.","data":null,"dataOptions":null,"dataMode":null,"headerData":[],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"test","script":{"id":"1907f524-7929-4b65-af7f-d7ffd4e20273","exec":["var openapi_current = pm.environment.get(\"openapi_current\");","var oai = JSON.parse(openapi_current);","","var has_api_paths = 0;","","var all_api_paths_have_summary = 1;","","if(oai.paths){","","    var paths = oai.paths;","    ","    for (const [path, methods] of Object.entries(paths)) {","       ","        console.log(path);","       ","        for (const [verb, method] of Object.entries(methods)) {","            ","            console.log(verb);","            ","            console.log(method);","            ","            var has_method_summary = 0;","            if(method.summary){","            ","                \/\/ Is method summary > 5","                if(method.summary.length > 5){","                  has_method_summary = 1;  ","                }     ","                else{","                    has_method_summary = 0;","                }","                ","            }","            ","        if(has_method_summary===0){","            pm.test(path + \" does not have a summary\", function () {","                pm.expect(has_method_summary).to.eql(1);","            });      ","            all_api_paths_have_summary = 0;","        }","            ","            ","        }       ","        ","    }","","} ","","if(all_api_paths_have_summary===1){","    pm.test(\"all API paths have a summary\", function () {","        pm.expect(all_api_paths_have_summary).to.eql(1);","    }); ","}"],"type":"text\/javascript"}}],"folder":"d080b25a-5317-49ce-b081-d37808f28fd9","preRequestScript":null,"tests":"var openapi_current = pm.environment.get(\"openapi_current\");\nvar oai = JSON.parse(openapi_current);\n\nvar has_api_paths = 0;\n\nvar all_api_paths_have_summary = 1;\n\nif(oai.paths){\n\n    var paths = oai.paths;\n    \n    for (const [path, methods] of Object.entries(paths)) {\n       \n        console.log(path);\n       \n        for (const [verb, method] of Object.entries(methods)) {\n            \n            console.log(verb);\n            \n            console.log(method);\n            \n            var has_method_summary = 0;\n            if(method.summary){\n            \n                \/\/ Is method summary > 5\n                if(method.summary.length > 5){\n                  has_method_summary = 1;  \n                }     \n                else{\n                    has_method_summary = 0;\n                }\n                \n            }\n            \n        if(has_method_summary===0){\n            pm.test(path + \" does not have a summary\", function () {\n                pm.expect(has_method_summary).to.eql(1);\n            });      \n            all_api_paths_have_summary = 0;\n        }\n            \n            \n        }       \n        \n    }\n\n} \n\nif(all_api_paths_have_summary===1){\n    pm.test(\"all API paths have a summary\", function () {\n        pm.expect(all_api_paths_have_summary).to.eql(1);\n    }); \n}","currentHelper":null,"helperAttributes":null,"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","headers":"","pathVariables":[]},{"id":"22e24d44-2935-4bde-81ab-7d09bdb54460","name":"Check All Methods Have Descriptions","url":"https:\/\/postman-echo.com\/get","description":"Checks to see if all methods have descriptions written for them, and checks the length.","data":null,"dataOptions":null,"dataMode":null,"headerData":[],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"test","script":{"id":"c046abcc-5a8f-4f1d-bc8c-9ca7be18276e","exec":["var openapi_current = pm.environment.get(\"openapi_current\");","var oai = JSON.parse(openapi_current);","","var has_api_paths = 0;","","var all_api_paths_have_description = 1;","","if(oai.paths){","","    var paths = oai.paths;","    ","    for (const [path, methods] of Object.entries(paths)) {","       ","        console.log(path);","       ","        for (const [verb, method] of Object.entries(methods)) {","            ","            console.log(verb);","            ","            console.log(method);","            ","            var has_method_description = 0;","            if(method.description){","            ","                \/\/ Is method summary > 5","                if(method.description.length > 5){","                    has_method_description = 1;  ","                }     ","                else{","                    has_method_description = 0;","                }","                ","            }","            ","        if(has_method_description===0){","            pm.test(path + \" does not have a description\", function () {","                pm.expect(has_method_description).to.eql(1);","            });      ","            all_api_paths_have_description = 0;","        }","            ","            ","        }       ","        ","    }","","} ","","if(all_api_paths_have_description===1){","    pm.test(\"all API paths have a description\", function () {","        pm.expect(all_api_paths_have_description).to.eql(1);","    }); ","}"],"type":"text\/javascript"}}],"folder":"d080b25a-5317-49ce-b081-d37808f28fd9","preRequestScript":null,"tests":"var openapi_current = pm.environment.get(\"openapi_current\");\nvar oai = JSON.parse(openapi_current);\n\nvar has_api_paths = 0;\n\nvar all_api_paths_have_description = 1;\n\nif(oai.paths){\n\n    var paths = oai.paths;\n    \n    for (const [path, methods] of Object.entries(paths)) {\n       \n        console.log(path);\n       \n        for (const [verb, method] of Object.entries(methods)) {\n            \n            console.log(verb);\n            \n            console.log(method);\n            \n            var has_method_description = 0;\n            if(method.description){\n            \n                \/\/ Is method summary > 5\n                if(method.description.length > 5){\n                    has_method_description = 1;  \n                }     \n                else{\n                    has_method_description = 0;\n                }\n                \n            }\n            \n        if(has_method_description===0){\n            pm.test(path + \" does not have a description\", function () {\n                pm.expect(has_method_description).to.eql(1);\n            });      \n            all_api_paths_have_description = 0;\n        }\n            \n            \n        }       \n        \n    }\n\n} \n\nif(all_api_paths_have_description===1){\n    pm.test(\"all API paths have a description\", function () {\n        pm.expect(all_api_paths_have_description).to.eql(1);\n    }); \n}","currentHelper":null,"helperAttributes":null,"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","headers":"","pathVariables":[]},{"id":"2ce1dac6-1061-44e8-8904-3046823c3c83","name":"Check For HTTP Status Success (2xx)","url":"https:\/\/postman-echo.com\/get","description":"Checks to see if all methods have a 2xx response.","data":null,"dataOptions":null,"dataMode":null,"headerData":[],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"test","script":{"id":"899cae4f-5816-4196-ab27-26c984055565","exec":["var openapi_current = pm.environment.get(\"openapi_current\");","var oai = JSON.parse(openapi_current);","","var all_methods_have_2xx = 1;","","if(oai.paths){","","    var paths = oai.paths;","    ","    for (const [path, methods] of Object.entries(paths)) {","       ","        console.log(path);","       ","        for (const [verb, method] of Object.entries(methods)) {","            ","            console.log(verb);","            ","            \/\/console.log(method);","            ","            var response = method.responses;","            ","            console.log(response);","            ","            if(response['200']){","                var have_2xx_response = 1;","                console.log(\"200\");","            }","            else if(response['201']){","                var have_2xx_response = 1;","                console.log(\"201\");","            }   ","            else if(response['202']){","                var have_2xx_response = 1;","                console.log(\"201\");","            }             ","            else if(response['204']){","                var have_2xx_response = 1;","                console.log(\"204\");","            }            ","            else{","                console.log(\"NONE\");","                var have_2xx_response = 0;","                all_methods_have_2xx = 0;","                pm.test(path + ' - ' + verb + ' method does not have a 200 series response.', function () {","                    pm.expect(have_2xx_response).to.eql(1);","                });                ","            }            ","            ","        }       ","        ","    }","","} ","","pm.test(\"All API methods have a 200 response\", function () {","    pm.expect(all_methods_have_2xx).to.eql(1);","});"],"type":"text\/javascript"}}],"folder":"4334d3a8-1de9-4ac9-aaea-f1c7e73493b4","preRequestScript":null,"tests":"var openapi_current = pm.environment.get(\"openapi_current\");\nvar oai = JSON.parse(openapi_current);\n\nvar all_methods_have_2xx = 1;\n\nif(oai.paths){\n\n    var paths = oai.paths;\n    \n    for (const [path, methods] of Object.entries(paths)) {\n       \n        console.log(path);\n       \n        for (const [verb, method] of Object.entries(methods)) {\n            \n            console.log(verb);\n            \n            \/\/console.log(method);\n            \n            var response = method.responses;\n            \n            console.log(response);\n            \n            if(response['200']){\n                var have_2xx_response = 1;\n                console.log(\"200\");\n            }\n            else if(response['201']){\n                var have_2xx_response = 1;\n                console.log(\"201\");\n            }   \n            else if(response['202']){\n                var have_2xx_response = 1;\n                console.log(\"201\");\n            }             \n            else if(response['204']){\n                var have_2xx_response = 1;\n                console.log(\"204\");\n            }            \n            else{\n                console.log(\"NONE\");\n                var have_2xx_response = 0;\n                all_methods_have_2xx = 0;\n                pm.test(path + ' - ' + verb + ' method does not have a 200 series response.', function () {\n                    pm.expect(have_2xx_response).to.eql(1);\n                });                \n            }            \n            \n        }       \n        \n    }\n\n} \n\npm.test(\"All API methods have a 200 response\", function () {\n    pm.expect(all_methods_have_2xx).to.eql(1);\n});","currentHelper":null,"helperAttributes":null,"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","headers":"","pathVariables":[]},{"id":"6165916a-4af3-460a-8cb5-8258eebd6b8b","name":"Make Sure All Method Query Parameters Are Camel Case","url":"https:\/\/postman-echo.com\/get","description":"Makes sure all of the parameters are camel case -- still working on this one.","data":null,"dataOptions":null,"dataMode":null,"headerData":[],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"test","script":{"id":"d1ebec03-5359-46a5-b07e-fd5c20796c48","exec":["var openapi_current = pm.environment.get(\"openapi_current\");","var oai = JSON.parse(openapi_current);","","var has_api_paths = 0;","","if(oai.paths){","","    var paths = oai.paths;","    ","    for (const [path, methods] of Object.entries(paths)) {","       ","        console.log(path);","       ","        for (const [verb, method] of Object.entries(methods)) {","            ","            console.log(verb);","            ","            console.log(method);","            ","            ","            if(method.parameters){","            ","                var parameters = method.parameters;","                ","                for (pIndex = 0; pIndex < parameters.length; pIndex++) {","                    ","                    name = parameters[pIndex].name;","                    ","                    name = 'camelCase';","                    ","                    var camelCase = (^[a-z]|[A-Z0-9])[a-z];","                    isCamelCase = camelCase.test(name);     ","                    console.log(isCamelCase);","                    ","                }","                ","            ","            }","            ","            ","            ","        }       ","        ","    }","","} ","","pm.test(\"API has paths\", function () {","    pm.expect(has_api_paths).to.eql(1);","});"],"type":"text\/javascript"}}],"folder":"c0f08b0b-8a50-45d6-9f76-530335840d0b","preRequestScript":null,"tests":"var openapi_current = pm.environment.get(\"openapi_current\");\nvar oai = JSON.parse(openapi_current);\n\nvar has_api_paths = 0;\n\nif(oai.paths){\n\n    var paths = oai.paths;\n    \n    for (const [path, methods] of Object.entries(paths)) {\n       \n        console.log(path);\n       \n        for (const [verb, method] of Object.entries(methods)) {\n            \n            console.log(verb);\n            \n            console.log(method);\n            \n            \n            if(method.parameters){\n            \n                var parameters = method.parameters;\n                \n                for (pIndex = 0; pIndex < parameters.length; pIndex++) {\n                    \n                    name = parameters[pIndex].name;\n                    \n                    name = 'camelCase';\n                    \n                    var camelCase = (^[a-z]|[A-Z0-9])[a-z];\n                    isCamelCase = camelCase.test(name);     \n                    console.log(isCamelCase);\n                    \n                }\n                \n            \n            }\n            \n            \n            \n        }       \n        \n    }\n\n} \n\npm.test(\"API has paths\", function () {\n    pm.expect(has_api_paths).to.eql(1);\n});","currentHelper":null,"helperAttributes":null,"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","headers":"","pathVariables":[]},{"id":"6421b64e-890b-4baf-abb2-63075541bcc7","name":"Check For HTTP Status Failure (5xx)","url":"https:\/\/postman-echo.com\/get","description":"Checks to see if all methods have a 5xx response.","data":null,"dataOptions":null,"dataMode":null,"headerData":[],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"test","script":{"id":"206f836a-ae9f-4c2e-9d1b-f8df532b3ec0","exec":["var openapi_current = pm.environment.get(\"openapi_current\");","var oai = JSON.parse(openapi_current);","","var all_methods_have_5xx = 1;","","if(oai.paths){","","    var paths = oai.paths;","    ","    for (const [path, methods] of Object.entries(paths)) {","       ","        console.log(path);","       ","        for (const [verb, method] of Object.entries(methods)) {","            ","            console.log(verb);","            ","            \/\/console.log(method);","            ","            var response = method.responses;","            ","            console.log(response);","            ","            if(response['500']){","                var have_5xx_response = 1;","                console.log(\"500\");","            }","            else if(response['501']){","                var have_5xx_response = 1;","                console.log(\"501\");","            }             ","            else{","                console.log(\"NONE\");","                var have_5xx_response = 0;","                all_methods_have_5xx = 0;","                pm.test(path + ' - ' + verb + ' method does not have a 500 series response.', function () {","                    pm.expect(have_5xx_response).to.eql(1);","                });                ","            }            ","            ","        }       ","        ","    }","","} ","","pm.test(\"All API methods have a 500 response\", function () {","    pm.expect(all_methods_have_5xx).to.eql(1);","});"],"type":"text\/javascript"}}],"folder":"4334d3a8-1de9-4ac9-aaea-f1c7e73493b4","preRequestScript":null,"tests":"var openapi_current = pm.environment.get(\"openapi_current\");\nvar oai = JSON.parse(openapi_current);\n\nvar all_methods_have_5xx = 1;\n\nif(oai.paths){\n\n    var paths = oai.paths;\n    \n    for (const [path, methods] of Object.entries(paths)) {\n       \n        console.log(path);\n       \n        for (const [verb, method] of Object.entries(methods)) {\n            \n            console.log(verb);\n            \n            \/\/console.log(method);\n            \n            var response = method.responses;\n            \n            console.log(response);\n            \n            if(response['500']){\n                var have_5xx_response = 1;\n                console.log(\"500\");\n            }\n            else if(response['501']){\n                var have_5xx_response = 1;\n                console.log(\"501\");\n            }             \n            else{\n                console.log(\"NONE\");\n                var have_5xx_response = 0;\n                all_methods_have_5xx = 0;\n                pm.test(path + ' - ' + verb + ' method does not have a 500 series response.', function () {\n                    pm.expect(have_5xx_response).to.eql(1);\n                });                \n            }            \n            \n        }       \n        \n    }\n\n} \n\npm.test(\"All API methods have a 500 response\", function () {\n    pm.expect(all_methods_have_5xx).to.eql(1);\n});","currentHelper":null,"helperAttributes":null,"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","headers":"","pathVariables":[]},{"id":"91104aa8-84d6-400d-ac58-1008d0750c5b","name":"Validate the Description for the API","url":"https:\/\/postman-echo.com\/get","description":"This is for ensuring the description of the API meets all requirements.","data":null,"dataOptions":null,"dataMode":null,"headerData":[],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"test","script":{"id":"33c68d2b-54d5-49d5-8170-f337a6a8c946","exec":["var openapi_current = pm.environment.get(\"openapi_current\");","var oai = JSON.parse(openapi_current);","","\/\/ Has description?","var has_description = 0;","if(oai.info.description){","    has_description = 1;","}","pm.test(\"Has a description for the API\", function () {","    pm.expect(has_description).to.eql(1);","});","","","if(has_description == 0){","  var greater_than_hundred = 0;","  var less_than_thousand = 0;","}","else{","    ","    var description = oai.info.description;","    ","    \/\/ Description is greater than 100","    var greater_than_hundred = 0;","    if(description.length > 100){","      greater_than_hundred = 1;  ","    }","    ","    \/\/ Description is less than 1000","    var less_than_thousand = 0;","    if(description.length < 1000){","      less_than_thousand = 1;  ","    }    ","","}","","pm.test(\"API description is greater than 100\", function () {","    pm.expect(greater_than_hundred).to.eql(1);","});","","pm.test(\"API description is less than 1000\", function () {","    pm.expect(less_than_thousand).to.eql(1);","});",""],"type":"text\/javascript"}}],"folder":"e68a6752-7bfa-4730-b764-4e2872f3fa95","preRequestScript":null,"tests":"var openapi_current = pm.environment.get(\"openapi_current\");\nvar oai = JSON.parse(openapi_current);\n\n\/\/ Has description?\nvar has_description = 0;\nif(oai.info.description){\n    has_description = 1;\n}\npm.test(\"Has a description for the API\", function () {\n    pm.expect(has_description).to.eql(1);\n});\n\n\nif(has_description == 0){\n  var greater_than_hundred = 0;\n  var less_than_thousand = 0;\n}\nelse{\n    \n    var description = oai.info.description;\n    \n    \/\/ Description is greater than 100\n    var greater_than_hundred = 0;\n    if(description.length > 100){\n      greater_than_hundred = 1;  \n    }\n    \n    \/\/ Description is less than 1000\n    var less_than_thousand = 0;\n    if(description.length < 1000){\n      less_than_thousand = 1;  \n    }    \n\n}\n\npm.test(\"API description is greater than 100\", function () {\n    pm.expect(greater_than_hundred).to.eql(1);\n});\n\npm.test(\"API description is less than 1000\", function () {\n    pm.expect(less_than_thousand).to.eql(1);\n});\n","currentHelper":null,"helperAttributes":null,"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","headers":"","pathVariables":[]},{"id":"96208336-59ae-4311-be30-39613f2a5253","name":"Check For GET, POST, PUT, and DELETE","url":"https:\/\/postman-echo.com\/get","description":"This checks to make sure all resources have a GET, POST, PUT, and DELETE, providing a full CRUD profile for each unique resource - still working on this one.","data":null,"dataOptions":null,"dataMode":null,"headerData":[],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"test","script":{"id":"8cd8f8e1-fa13-4c36-8651-f3c8b2c91a33","exec":["var openapi_current = pm.environment.get(\"openapi_current\");","var oai = JSON.parse(openapi_current);","","var has_api_paths = 0;","","if(oai.paths){","","    var paths = oai.paths;","    ","    for (const [path, methods] of Object.entries(paths)) {","       ","        console.log(path);","       ","        for (const [verb, method] of Object.entries(methods)) {","            ","            console.log(verb);","            ","            console.log(method);","            ","        }       ","        ","    }","","} ","","pm.test(\"API has paths\", function () {","    pm.expect(has_api_paths).to.eql(1);","});"],"type":"text\/javascript"}}],"folder":"d080b25a-5317-49ce-b081-d37808f28fd9","preRequestScript":null,"tests":"var openapi_current = pm.environment.get(\"openapi_current\");\nvar oai = JSON.parse(openapi_current);\n\nvar has_api_paths = 0;\n\nif(oai.paths){\n\n    var paths = oai.paths;\n    \n    for (const [path, methods] of Object.entries(paths)) {\n       \n        console.log(path);\n       \n        for (const [verb, method] of Object.entries(methods)) {\n            \n            console.log(verb);\n            \n            console.log(method);\n            \n        }       \n        \n    }\n\n} \n\npm.test(\"API has paths\", function () {\n    pm.expect(has_api_paths).to.eql(1);\n});","currentHelper":null,"helperAttributes":null,"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","headers":"","pathVariables":[]},{"id":"9cfeeb5b-809f-4a3a-adcb-a3d736ccc44f","name":"Make Sure All Schema Properties Have Descriptions","url":"https:\/\/postman-echo.com\/get","description":"Checks to see if all schema properties have descriptions.","data":null,"dataOptions":null,"dataMode":null,"headerData":[],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"test","script":{"id":"d5df79e9-6582-468c-84c1-0d861c1f553b","exec":["var openapi_current = pm.environment.get(\"openapi_current\");","var oai = JSON.parse(openapi_current);","","var all_schema_properties_have_descriptions = 1;","","var schemas = oai.components.schemas;","","for (const [schema_name, schema] of Object.entries(schemas)) {","   ","   console.log(schema_name); ","   ","   if(schema.properties){","       for (const [property_name, property] of Object.entries(schema.properties)) {","       console.log(property_name);","       ","            if(property.description){","            ","                description = property.description;","                ","                \/\/ Description is greater than 100","                var greater_than_hundred = 0;","                if(description.length > 100){","                  greater_than_hundred = 1;  ","                }","                ","                \/\/ Description is less than 1000","                var less_than_thousand = 0;","                if(description.length < 1000){","                  less_than_thousand = 1;  ","                }        ","                ","                pm.test(schema_name + ' - ' + property_name + ' description is greater than 100', function () {","                    pm.expect(greater_than_hundred).to.eql(1);","                });","                ","                pm.test(schema_name + ' - ' + property_name + ' description is less than 1000', function () {","                    pm.expect(less_than_thousand).to.eql(1);","                });","                ","                ","            ","            }","            else{","                var all_schema_properties_have_descriptions = 0;","                ","                no_description = 0;  ","                pm.test(schema_name + ' - ' + property_name + ' does not have a description', function () {","                    pm.expect(no_description).to.eql(1);","                });                ","                ","            }       ","       ","       ","       }","   }","   ","}","","pm.test(\"All schema for this API have property descriptions\", function () {","    pm.expect(all_schema_properties_have_descriptions).to.eql(1);","});"],"type":"text\/javascript"}}],"folder":"759a83dd-2982-4fc8-b896-37d7496fecdc","preRequestScript":null,"tests":"var openapi_current = pm.environment.get(\"openapi_current\");\nvar oai = JSON.parse(openapi_current);\n\nvar all_schema_properties_have_descriptions = 1;\n\nvar schemas = oai.components.schemas;\n\nfor (const [schema_name, schema] of Object.entries(schemas)) {\n   \n   console.log(schema_name); \n   \n   if(schema.properties){\n       for (const [property_name, property] of Object.entries(schema.properties)) {\n       console.log(property_name);\n       \n            if(property.description){\n            \n                description = property.description;\n                \n                \/\/ Description is greater than 100\n                var greater_than_hundred = 0;\n                if(description.length > 100){\n                  greater_than_hundred = 1;  \n                }\n                \n                \/\/ Description is less than 1000\n                var less_than_thousand = 0;\n                if(description.length < 1000){\n                  less_than_thousand = 1;  \n                }        \n                \n                pm.test(schema_name + ' - ' + property_name + ' description is greater than 100', function () {\n                    pm.expect(greater_than_hundred).to.eql(1);\n                });\n                \n                pm.test(schema_name + ' - ' + property_name + ' description is less than 1000', function () {\n                    pm.expect(less_than_thousand).to.eql(1);\n                });\n                \n                \n            \n            }\n            else{\n                var all_schema_properties_have_descriptions = 0;\n                \n                no_description = 0;  \n                pm.test(schema_name + ' - ' + property_name + ' does not have a description', function () {\n                    pm.expect(no_description).to.eql(1);\n                });                \n                \n            }       \n       \n       \n       }\n   }\n   \n}\n\npm.test(\"All schema for this API have property descriptions\", function () {\n    pm.expect(all_schema_properties_have_descriptions).to.eql(1);\n});","currentHelper":null,"helperAttributes":null,"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","headers":"","pathVariables":[]},{"id":"ab178595-dc2b-4638-9a29-aec1e03cf851","name":"Check All Methods Have Operation Ids","url":"https:\/\/postman-echo.com\/get","description":"Checks to see if all methods have operationIds written for them.","data":null,"dataOptions":null,"dataMode":null,"headerData":[],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"test","script":{"id":"e3a92335-2f05-455c-be15-117c19072b64","exec":["var openapi_current = pm.environment.get(\"openapi_current\");","var oai = JSON.parse(openapi_current);","","var has_api_paths = 0;","","var all_api_paths_have_operation_id = 1;","","if(oai.paths){","","    var paths = oai.paths;","    ","    for (const [path, methods] of Object.entries(paths)) {","       ","        console.log(path);","       ","        for (const [verb, method] of Object.entries(methods)) {","            ","            console.log(verb);","            ","            console.log(method);","            ","            var has_method_operation_id = 0;","            if(method.operationId){","            ","                \/\/ Is method summary > 5","                if(method.operationId.length > 5){","                  has_method_operation_id = 1;  ","                }     ","                else{","                    has_method_operation_id = 0;","                }","                ","            }","            ","        if(has_method_operation_id===0){","            pm.test(path + \" does not have an operationId\", function () {","                pm.expect(has_method_operation_id).to.eql(1);","            });      ","            all_api_paths_have_operation_id = 0;","        }","            ","            ","        }       ","        ","    }","","} ","","if(all_api_paths_have_operation_id===1){","    pm.test(\"all API paths have an operationId\", function () {","        pm.expect(all_api_paths_have_operation_id).to.eql(1);","    }); ","}"],"type":"text\/javascript"}}],"folder":"d080b25a-5317-49ce-b081-d37808f28fd9","preRequestScript":null,"tests":"var openapi_current = pm.environment.get(\"openapi_current\");\nvar oai = JSON.parse(openapi_current);\n\nvar has_api_paths = 0;\n\nvar all_api_paths_have_operation_id = 1;\n\nif(oai.paths){\n\n    var paths = oai.paths;\n    \n    for (const [path, methods] of Object.entries(paths)) {\n       \n        console.log(path);\n       \n        for (const [verb, method] of Object.entries(methods)) {\n            \n            console.log(verb);\n            \n            console.log(method);\n            \n            var has_method_operation_id = 0;\n            if(method.operationId){\n            \n                \/\/ Is method summary > 5\n                if(method.operationId.length > 5){\n                  has_method_operation_id = 1;  \n                }     \n                else{\n                    has_method_operation_id = 0;\n                }\n                \n            }\n            \n        if(has_method_operation_id===0){\n            pm.test(path + \" does not have an operationId\", function () {\n                pm.expect(has_method_operation_id).to.eql(1);\n            });      \n            all_api_paths_have_operation_id = 0;\n        }\n            \n            \n        }       \n        \n    }\n\n} \n\nif(all_api_paths_have_operation_id===1){\n    pm.test(\"all API paths have an operationId\", function () {\n        pm.expect(all_api_paths_have_operation_id).to.eql(1);\n    }); \n}","currentHelper":null,"helperAttributes":null,"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","headers":"","pathVariables":[]},{"id":"b68ce10c-b0b9-422d-8900-db9b1db4b913","name":"Ensure Words Are Used in Paths","url":"https:\/\/postman-echo.com\/get","description":"This loops through each segment of each API path and checks to see if it is a word. It ignores variables. This relies upon a [word dictionary](https:\/\/gist.github.com\/kinlane\/cfeea900c5112794576d45eaca359c1b) as the source of what is a word.","data":null,"dataOptions":null,"dataMode":null,"headerData":[],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"test","script":{"id":"1b589646-ff29-4abc-93a0-9437e6f7fc9b","exec":["var openapi_current = pm.environment.get(\"openapi_current\");","var oai = JSON.parse(openapi_current);","","var has_api_paths = 0;","","var all_resources = [];","","if(oai.paths){","","    var paths = oai.paths;","    ","    for (const [path, methods] of Object.entries(paths)) {","        ","        var path_array = path.split(\"\/\");","        ","        for (aIndex = 0; aIndex < path_array.length; aIndex++) {","       ","            var segment = path_array[aIndex];","            if(segment.length > 0){","                ","                var variable = segment.includes(\"{\");","                ","                \/\/console.log(\"variable: \" + variable);","                if(!variable){","","                  var already_stored = 0;","                  ","                  for (bIndex = 0; bIndex < all_resources.length; bIndex++) {","                    if(segment === all_resources[bIndex]){","                        already_stored = 1;","                    }","                  }","                  ","                 var s = {};","                 s['word'] = segment;","                 s['path'] = path;","                  ","                if(already_stored === 0){","                    all_resources.push(s);","                }   ","                  ","            }","        }","            ","    }","        ","}","","} ","","console.log(all_resources);","","var postman_api_url = 'https:\/\/gist.githubusercontent.com\/kinlane\/cfeea900c5112794576d45eaca359c1b\/raw\/d302473b467b001915365f144f04f8bc4ccb6041\/words.json';","","const apiVersionsRequest = {","  url: postman_api_url,","  method: 'GET'","};","","pm.sendRequest(apiVersionsRequest, function (err, res) {","    if (err) {","        console.log(err);","    } else {  ","","        var words = res.json(); ","        ","        for (aIndex = 0; aIndex < all_resources.length; aIndex++) {","            ","            var resource_a_word = 0","            var resource = all_resources[aIndex].word;","            var path = all_resources[aIndex].path;","            ","            for (bIndex = 0; bIndex < words.length; bIndex++) {","                if(all_resources[aIndex].word === words[bIndex].word){","                   resource_a_word = 1; ","                }","            }    ","            ","            pm.test(resource + \" from \" + path + \" is a word\", function () {","                pm.expect(resource_a_word).to.eql(1);","            });            ","        }","        ","    }","});","",""],"type":"text\/javascript"}}],"folder":"4befb064-bcf8-4d18-822f-990a1cb1139e","preRequestScript":null,"tests":"var openapi_current = pm.environment.get(\"openapi_current\");\nvar oai = JSON.parse(openapi_current);\n\nvar has_api_paths = 0;\n\nvar all_resources = [];\n\nif(oai.paths){\n\n    var paths = oai.paths;\n    \n    for (const [path, methods] of Object.entries(paths)) {\n        \n        var path_array = path.split(\"\/\");\n        \n        for (aIndex = 0; aIndex < path_array.length; aIndex++) {\n       \n            var segment = path_array[aIndex];\n            if(segment.length > 0){\n                \n                var variable = segment.includes(\"{\");\n                \n                \/\/console.log(\"variable: \" + variable);\n                if(!variable){\n\n                  var already_stored = 0;\n                  \n                  for (bIndex = 0; bIndex < all_resources.length; bIndex++) {\n                    if(segment === all_resources[bIndex]){\n                        already_stored = 1;\n                    }\n                  }\n                  \n                 var s = {};\n                 s['word'] = segment;\n                 s['path'] = path;\n                  \n                if(already_stored === 0){\n                    all_resources.push(s);\n                }   \n                  \n            }\n        }\n            \n    }\n        \n}\n\n} \n\nconsole.log(all_resources);\n\nvar postman_api_url = 'https:\/\/gist.githubusercontent.com\/kinlane\/cfeea900c5112794576d45eaca359c1b\/raw\/d302473b467b001915365f144f04f8bc4ccb6041\/words.json';\n\nconst apiVersionsRequest = {\n  url: postman_api_url,\n  method: 'GET'\n};\n\npm.sendRequest(apiVersionsRequest, function (err, res) {\n    if (err) {\n        console.log(err);\n    } else {  \n\n        var words = res.json(); \n        \n        for (aIndex = 0; aIndex < all_resources.length; aIndex++) {\n            \n            var resource_a_word = 0\n            var resource = all_resources[aIndex].word;\n            var path = all_resources[aIndex].path;\n            \n            for (bIndex = 0; bIndex < words.length; bIndex++) {\n                if(all_resources[aIndex].word === words[bIndex].word){\n                   resource_a_word = 1; \n                }\n            }    \n            \n            pm.test(resource + \" from \" + path + \" is a word\", function () {\n                pm.expect(resource_a_word).to.eql(1);\n            });            \n        }\n        \n    }\n});\n\n","currentHelper":null,"helperAttributes":null,"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","headers":"","pathVariables":[]},{"id":"bc0222f6-2f03-4569-8424-772749045d45","name":"Check All Methods Have Tags","url":"https:\/\/postman-echo.com\/get","description":"Make sure all methods have some tags.","data":null,"dataOptions":null,"dataMode":null,"headerData":[],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"test","script":{"id":"3133e177-3dda-41e6-b337-27cee2658152","exec":["var openapi_current = pm.environment.get(\"openapi_current\");","var oai = JSON.parse(openapi_current);","","var all_methods_have_tags = 1;","","if(oai.paths){","","    var paths = oai.paths;","    ","    for (const [path, methods] of Object.entries(paths)) {","       ","        console.log(path);","       ","        for (const [verb, method] of Object.entries(methods)) {","            ","            console.log(verb);","            ","            console.log(method);","            ","            var tags = method.tags;","            console.log(tags);","            var tag_count = tags.length;","            console.log(tag_count);","            if(tag_count > 0){","                var have_tags = 1;","            }","            else{","                var have_tags = 0;","                all_methods_have_tags = 0;","                pm.test(path + ' - ' + verb + ' method does not have tags.', function () {","                    pm.expect(have_tags).to.eql(1);","                });                ","            }","            ","        }       ","        ","    }","","} ","","pm.test(\"All API methods have tags\", function () {","    pm.expect(all_methods_have_tags).to.eql(1);","});"],"type":"text\/javascript"}}],"folder":"d080b25a-5317-49ce-b081-d37808f28fd9","preRequestScript":null,"tests":"var openapi_current = pm.environment.get(\"openapi_current\");\nvar oai = JSON.parse(openapi_current);\n\nvar all_methods_have_tags = 1;\n\nif(oai.paths){\n\n    var paths = oai.paths;\n    \n    for (const [path, methods] of Object.entries(paths)) {\n       \n        console.log(path);\n       \n        for (const [verb, method] of Object.entries(methods)) {\n            \n            console.log(verb);\n            \n            console.log(method);\n            \n            var tags = method.tags;\n            console.log(tags);\n            var tag_count = tags.length;\n            console.log(tag_count);\n            if(tag_count > 0){\n                var have_tags = 1;\n            }\n            else{\n                var have_tags = 0;\n                all_methods_have_tags = 0;\n                pm.test(path + ' - ' + verb + ' method does not have tags.', function () {\n                    pm.expect(have_tags).to.eql(1);\n                });                \n            }\n            \n        }       \n        \n    }\n\n} \n\npm.test(\"All API methods have tags\", function () {\n    pm.expect(all_methods_have_tags).to.eql(1);\n});","currentHelper":null,"helperAttributes":null,"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","headers":"","pathVariables":[]},{"id":"f8cf0571-859b-4b34-ac49-21330ebfcb95","name":"Pull API Into Environment","url":"https:\/\/api.getpostman.com\/apis\/?workspace_name=API LIfe Cycle&api_name=Asteroids&api_version=Draft","description":"The pulls an API from Postman based upon name, then finds the underlying version, and OpenAPI schema--then loads that OpenAPI into the environment so it can be used across the different governance calls without a roundtrip to the Postman API.","data":null,"dataOptions":null,"dataMode":null,"headerData":[{"key":"x-api-key","type":"text","value":"{{postman_api_key}}"}],"method":"GET","pathVariableData":[],"queryParams":[{"key":"workspace_name","value":"API LIfe Cycle","equals":true,"description":"","enabled":true},{"key":"api_name","value":"Asteroids","equals":true,"description":"","enabled":true},{"key":"api_version","value":"Draft","equals":true,"description":"","enabled":true}],"auth":null,"events":[{"listen":"prerequest","script":{"id":"621ede08-3001-490d-bbf9-7ddab5d1e50a","exec":[""],"type":"text\/javascript"}},{"listen":"test","script":{"id":"de866ea0-9fc8-45f0-9959-080d4dd8eaa6","exec":["var response = pm.response.json();","","var postman_api_key = pm.environment.get(\"postman_api_key\");","","var apis = response.apis;","","\/\/ parse the query string","const paramsString = request.url.split('?')[1];","const eachParamArray = paramsString.split('&');","let params = {};","eachParamArray.forEach((param) => {","    const key = param.split('=')[0];","    const value = param.split('=')[1];","    Object.assign(params, {[key]: value});","});","","\/\/ set incoming values","var api_request_name = params.api_name;","var api_request_version = params.api_version;","if(api_request_version===''){","    api_request_version = 'Draft';","}","","pm.environment.set(\"postman_api_name\", api_request_name);","","\/\/ loop through each api","for (aIndex = 0; aIndex < apis.length; aIndex++) {","    ","    var api_id = apis[aIndex].id;","    var api_name = apis[aIndex].name;","    var api_summary = apis[aIndex].summary;","    var api_description = apis[aIndex].description;","    var api_createdAt = apis[aIndex].createdAt;","    var api_updatedAt = apis[aIndex].updatedAt;","    var api_createdBy = apis[aIndex].createdBy;","    var api_updatedBy = apis[aIndex].updatedBy;","    ","    \/\/ if our incoming api matches then this is our API","    if(api_request_name==api_name){","        ","        console.log(\"API ID: \" + api_id);","        console.log(\"API Name: \" + api_name);","        ","        var postman_api_url = 'https:\/\/api.getpostman.com\/apis\/' + api_id + '\/versions';","        ","        const apiVersionsRequest = {","          url: postman_api_url,","          method: 'GET',","          header: 'x-api-key:' + postman_api_key","        };","        ","        pm.sendRequest(apiVersionsRequest, function (err, res) {","            if (err) {","                console.log(err);","            } else {  ","                ","                var api_version_response = res.json();","                ","                var versions = api_version_response.versions;","                ","                \/\/console.log(versions);","                ","                for (vIndex = 0; vIndex < versions.length; vIndex++) {","                    ","                    version_id = versions[vIndex].id;","                    version_name = versions[vIndex].name;","                    api_id = versions[vIndex].api;","                    version_createdAt = versions[vIndex].createdAt;","                    version_updatedAt = versions[vIndex].updatedAt;","                    version_createdBy = versions[vIndex].createdBy;","                    version_updatedBy = versions[vIndex].updatedBy;","                    version_lastRevision = versions[vIndex].lastRevision;","        ","                    pm.environment.set(\"postman_api_id\", api_id);","                    pm.environment.set(\"postman_api_version_id\", version_id);","                    pm.environment.set(\"postman_api_version_name\", version_name);         ","","                    if(api_request_version===version_name){","                        ","                        \/\/console.log(version_id + ' - ' + version_name);","                        ","                        var postman_versions_url = 'https:\/\/api.getpostman.com\/apis\/' + api_id + '\/versions\/' + version_id;","                        ","                        const apiVersionRequest = {","                          url: postman_versions_url,","                          method: 'GET',","                          header: 'x-api-key:' + postman_api_key","                        };","                        ","                        pm.sendRequest(apiVersionRequest, function (err, res) {","                            if (err) {","                                console.log(err);","                            } else {  ","                                ","                                var api_version_detail_response = res.json();   ","                                ","                                var schema_id = api_version_detail_response.version.schema[0];","                                pm.environment.set(\"postman_schema_id\", schema_id);","                                ","                                \/\/console.log(\"schema_id: \" + schema_id);","                                        ","                                var postman_schema_url = 'https:\/\/api.getpostman.com\/apis\/' + api_id + '\/versions\/' + version_id + '\/schemas\/' + schema_id;","                                ","                                const apiSchemaRequest = {","                                  url: postman_schema_url,","                                  method: 'GET',","                                  header: 'x-api-key:' + postman_api_key","                                };","                                ","                                pm.sendRequest(apiSchemaRequest, function (err, res) {","                                    if (err) {","                                        console.log(err);","                                    } else {  ","                                        ","                                    var api_schema_response = res.json();  ","                                    \/\/console.log(api_schema_response);","                                    ","                                    var schema_type = api_schema_response.schema.type;","                                    var schema_createdBy = api_schema_response.schema.createdBy;","                                    var schema_updatedBy = api_schema_response.schema.updatedBy;","                                    var schema_language = api_schema_response.schema.language;","                                    var schema_createdAt = api_schema_response.schema.createdAt;","                                    var schema_updatedAt = api_schema_response.schema.updatedAt;","                                    var schema_body = api_schema_response.schema.schema;","                                    if(schema_type=='openapi3'){","                                        \/\/ We Have Our Schema","                                        \/\/console.log(schema_body);","                                        ","                                        pm.environment.set(\"openapi_current\", schema_body);","                                        ","                                        var oas = JSON.parse(schema_body);","                                        ","                                        \/\/ Assumption - That schema array is table name -- only focused on one resource per openapi","                                        for (const [schema, object] of Object.entries(oas.components.schemas)) {","                                           if(object.type === 'array'){","                                               table_name = schema;","                                               table_name = table_name.replace(\" \",\"_\");","                                               table_name = table_name.toLowerCase()","                                               pm.environment.set(\"aws_dynamodb_table_name\", table_name);","                                           }","                                           if(object.type === 'object'){","                                               if(schema==='Error'){","                                               }","                                               else{","                                               resource_name = schema;","                                               resource_slug = resource_name.replace(\" \",\"_\");","                                               resource_slug = resource_slug.toLowerCase();","                                               }","                                           }     ","                                        }   ","                                        ","                                        ","                                    }","                                    ","                                    }","                                });                                ","                                        ","                                ","                                ","                            }","                        });","                        ","                    }","                }","                ","            }","        });","        ","    }","","}"],"type":"text\/javascript"}}],"folder":null,"responses":[{"id":"554d1f38-6879-4dd8-8a5a-4d5e660636f4","name":"Get single API","status":"OK","mime":"","language":"json","text":"{\n\t\"api\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t}\n}","responseCode":{"code":200,"name":"OK","detail":""},"requestObject":{"id":"0053cb68-834f-4863-8aaf-93c3f9a112b6","method":"GET","headers":"x-api-key: {{apiKey}}\nContent-Type: application\/json","url":"{{url}}\/apis\/{{apiId}}","pathVariableData":[],"queryParams":[],"headerData":[{"key":"x-api-key","value":"{{apiKey}}","type":"text"},{"key":"Content-Type","name":"Content-Type","value":"application\/json","type":"text"}],"dataMode":null,"data":null},"headers":[],"cookies":[],"request":"f8cf0571-859b-4b34-ac49-21330ebfcb95","collection":"9c16e96a-722d-4e58-a5f3-011badc69580"}],"preRequestScript":null,"tests":"var response = pm.response.json();\n\nvar postman_api_key = pm.environment.get(\"postman_api_key\");\n\nvar apis = response.apis;\n\n\/\/ parse the query string\nconst paramsString = request.url.split('?')[1];\nconst eachParamArray = paramsString.split('&');\nlet params = {};\neachParamArray.forEach((param) => {\n    const key = param.split('=')[0];\n    const value = param.split('=')[1];\n    Object.assign(params, {[key]: value});\n});\n\n\/\/ set incoming values\nvar api_request_name = params.api_name;\nvar api_request_version = params.api_version;\nif(api_request_version===''){\n    api_request_version = 'Draft';\n}\n\npm.environment.set(\"postman_api_name\", api_request_name);\n\n\/\/ loop through each api\nfor (aIndex = 0; aIndex < apis.length; aIndex++) {\n    \n    var api_id = apis[aIndex].id;\n    var api_name = apis[aIndex].name;\n    var api_summary = apis[aIndex].summary;\n    var api_description = apis[aIndex].description;\n    var api_createdAt = apis[aIndex].createdAt;\n    var api_updatedAt = apis[aIndex].updatedAt;\n    var api_createdBy = apis[aIndex].createdBy;\n    var api_updatedBy = apis[aIndex].updatedBy;\n    \n    \/\/ if our incoming api matches then this is our API\n    if(api_request_name==api_name){\n        \n        console.log(\"API ID: \" + api_id);\n        console.log(\"API Name: \" + api_name);\n        \n        var postman_api_url = 'https:\/\/api.getpostman.com\/apis\/' + api_id + '\/versions';\n        \n        const apiVersionsRequest = {\n          url: postman_api_url,\n          method: 'GET',\n          header: 'x-api-key:' + postman_api_key\n        };\n        \n        pm.sendRequest(apiVersionsRequest, function (err, res) {\n            if (err) {\n                console.log(err);\n            } else {  \n                \n                var api_version_response = res.json();\n                \n                var versions = api_version_response.versions;\n                \n                \/\/console.log(versions);\n                \n                for (vIndex = 0; vIndex < versions.length; vIndex++) {\n                    \n                    version_id = versions[vIndex].id;\n                    version_name = versions[vIndex].name;\n                    api_id = versions[vIndex].api;\n                    version_createdAt = versions[vIndex].createdAt;\n                    version_updatedAt = versions[vIndex].updatedAt;\n                    version_createdBy = versions[vIndex].createdBy;\n                    version_updatedBy = versions[vIndex].updatedBy;\n                    version_lastRevision = versions[vIndex].lastRevision;\n        \n                    pm.environment.set(\"postman_api_id\", api_id);\n                    pm.environment.set(\"postman_api_version_id\", version_id);\n                    pm.environment.set(\"postman_api_version_name\", version_name);         \n\n                    if(api_request_version===version_name){\n                        \n                        \/\/console.log(version_id + ' - ' + version_name);\n                        \n                        var postman_versions_url = 'https:\/\/api.getpostman.com\/apis\/' + api_id + '\/versions\/' + version_id;\n                        \n                        const apiVersionRequest = {\n                          url: postman_versions_url,\n                          method: 'GET',\n                          header: 'x-api-key:' + postman_api_key\n                        };\n                        \n                        pm.sendRequest(apiVersionRequest, function (err, res) {\n                            if (err) {\n                                console.log(err);\n                            } else {  \n                                \n                                var api_version_detail_response = res.json();   \n                                \n                                var schema_id = api_version_detail_response.version.schema[0];\n                                pm.environment.set(\"postman_schema_id\", schema_id);\n                                \n                                \/\/console.log(\"schema_id: \" + schema_id);\n                                        \n                                var postman_schema_url = 'https:\/\/api.getpostman.com\/apis\/' + api_id + '\/versions\/' + version_id + '\/schemas\/' + schema_id;\n                                \n                                const apiSchemaRequest = {\n                                  url: postman_schema_url,\n                                  method: 'GET',\n                                  header: 'x-api-key:' + postman_api_key\n                                };\n                                \n                                pm.sendRequest(apiSchemaRequest, function (err, res) {\n                                    if (err) {\n                                        console.log(err);\n                                    } else {  \n                                        \n                                    var api_schema_response = res.json();  \n                                    \/\/console.log(api_schema_response);\n                                    \n                                    var schema_type = api_schema_response.schema.type;\n                                    var schema_createdBy = api_schema_response.schema.createdBy;\n                                    var schema_updatedBy = api_schema_response.schema.updatedBy;\n                                    var schema_language = api_schema_response.schema.language;\n                                    var schema_createdAt = api_schema_response.schema.createdAt;\n                                    var schema_updatedAt = api_schema_response.schema.updatedAt;\n                                    var schema_body = api_schema_response.schema.schema;\n                                    if(schema_type=='openapi3'){\n                                        \/\/ We Have Our Schema\n                                        \/\/console.log(schema_body);\n                                        \n                                        pm.environment.set(\"openapi_current\", schema_body);\n                                        \n                                        var oas = JSON.parse(schema_body);\n                                        \n                                        \/\/ Assumption - That schema array is table name -- only focused on one resource per openapi\n                                        for (const [schema, object] of Object.entries(oas.components.schemas)) {\n                                           if(object.type === 'array'){\n                                               table_name = schema;\n                                               table_name = table_name.replace(\" \",\"_\");\n                                               table_name = table_name.toLowerCase()\n                                               pm.environment.set(\"aws_dynamodb_table_name\", table_name);\n                                           }\n                                           if(object.type === 'object'){\n                                               if(schema==='Error'){\n                                               }\n                                               else{\n                                               resource_name = schema;\n                                               resource_slug = resource_name.replace(\" \",\"_\");\n                                               resource_slug = resource_slug.toLowerCase();\n                                               }\n                                           }     \n                                        }   \n                                        \n                                        \n                                    }\n                                    \n                                    }\n                                });                                \n                                        \n                                \n                                \n                            }\n                        });\n                        \n                    }\n                }\n                \n            }\n        });\n        \n    }\n\n}","currentHelper":null,"helperAttributes":null,"collectionId":"9c16e96a-722d-4e58-a5f3-011badc69580","headers":"x-api-key: {{postman_api_key}}\n","pathVariables":[]}]}